#include <stdio.h>
#include <time.h>
#include <bits/stdc++.h> 
using namespace std; 
/* Standard insertion algorithm*/
void InsertionSort(int arr[], int *begin, int *end) 
{ 
    // Get the left and the right index of the subarray 
    // to be sorted 
    int left = begin - arr; 
    int right = end - arr; 
  
    for (int i = left+1; i <= right; i++) 
    { 
        int key = arr[i]; 
        int j = i-1; 
  
       /* Move elements of arr[0..i-1], that are 
          greater than key, to one position ahead 
          of their current position */
        while (j >= left && arr[j] > key) 
        { 
            arr[j+1] = arr[j]; 
            j = j-1; 
        } 
        arr[j+1] = key; 
   } 
  
   return; 
} 

/* My insertion algorithm*/
void InsertionSort1(int arr[], int *begin, int *end) 
{ 
    // Get the left and the right index of the subarray 
    // to be sorted 
    int left = begin - arr; 
    int right = end - arr; 
  
    for (int i = left+1; i <= right; i++) 
    { 
        int key = arr[i]; 
        int j = i-1; 
        if(key<arr[0]){
            //printf("%d ", key);
            for(int k=i-1;k>=0;k--){
                arr[k+1]=arr[k];
            }
            arr[0]=key;
        }
        else{
        while (j >= left && arr[j] > key) 
        { 
            arr[j+1] = arr[j]; 
            j = j-1; 
        }
        
        arr[j+1] = key; 
        }
   } 
  
   return; 
} 

// A utility function ot print an array of size n 
void printArray(int arr[], int n) 
{ 
   for (int i=0; i < n; i++) 
       printf("%d ", arr[i]); 
   printf("\n"); 
} 

// Driver program to test Introsort 
int main() 
{ 
    int arr[] = {330, 320, 310, 300, 280, 270, 260, 250, 220, 210, 200, 190, 180, 170, 160, 150, 140, 130, 120, 110, 100, 
    90, 80, 70, 60, 50, 40, 30, 20, 10, 0, -10, -20, -30, -40, -50, -60, -70, -80, -90, -100, -110, -120, -130, -140, -150, 
    -160, -170, -180, -190, -200, -210, -220, -230, -240, -250, -260, -270, -280, -285, -290, -295, -300, -305, -310, -315, 
    -320, -325, -330, -335, -340, -345, -350, -355, -360, -365, -370, -375, -380, 330, 320, 310, 300, 280, 270, 260, 250, 220,
    210, 200, 190, 180, 170, 160, 150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0, -10, -20, -30, -40, -50,
    -60, -70, -80, -90, -100, -110, -120, -130, -140, -150, -160, -170, -180, -190, -200, -210, -220, -230, -240, -250, -260,
    -270, -280, -285, -290, -295, -300, -305, -310, -315, -320, -325, -330, -335, -340, -345, -350, -355, -360, -365, -370, 
    -375, -380, 330, 320, 310, 300, 280, 270, 260, 250, 220, 210, 200, 190, 180, 170, 160, 150, 140, 130, 120, 110, 100, 90, 
    80, 70, 60, 50, 40, 30, 20, 10, 0, -10, -20, -30, -40, -50, -60, -70, -80, -90, -100, -110, -120, -130, -140, -150, -160,
    -170, -180, -190, -200, -210, -220, -230, -240, -250, -260, -270, -280, -285, -290, -295, -300, -305, -310, -315, -320,
    -325, -330, -335, -340, -345, -350, -355, -360, -365, -370, -375, -380, 330, 320, 310, 300, 280, 270, 260, 250, 220, 210, 
    200, 190, 180, 170, 160, 150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0, -10, -20, -30, -40, -50, -60, 
    -70, -80, -90, -100, -110, -120, -130, -140, -150, -160, -170, -180, -190, -200, -210, -220, -230, -240, -250, -260, -270,
    -280, -285, -290, -295, -300, -305, -310, -315, -320, -325, -330, -335, -340, -345, -350, -355, -360, -365, -370, -375, -380}; 
    
    int arr1[] = {330, 320, 310, 300, 280, 270, 260, 250, 220, 210, 200, 190, 180, 170, 160, 150, 140, 130, 120, 110, 100, 
    90, 80, 70, 60, 50, 40, 30, 20, 10, 0, -10, -20, -30, -40, -50, -60, -70, -80, -90, -100, -110, -120, -130, -140, -150, 
    -160, -170, -180, -190, -200, -210, -220, -230, -240, -250, -260, -270, -280, -285, -290, -295, -300, -305, -310, -315, 
    -320, -325, -330, -335, -340, -345, -350, -355, -360, -365, -370, -375, -380, 330, 320, 310, 300, 280, 270, 260, 250, 220,
    210, 200, 190, 180, 170, 160, 150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0, -10, -20, -30, -40, -50,
    -60, -70, -80, -90, -100, -110, -120, -130, -140, -150, -160, -170, -180, -190, -200, -210, -220, -230, -240, -250, -260,
    -270, -280, -285, -290, -295, -300, -305, -310, -315, -320, -325, -330, -335, -340, -345, -350, -355, -360, -365, -370, 
    -375, -380, 330, 320, 310, 300, 280, 270, 260, 250, 220, 210, 200, 190, 180, 170, 160, 150, 140, 130, 120, 110, 100, 90, 
    80, 70, 60, 50, 40, 30, 20, 10, 0, -10, -20, -30, -40, -50, -60, -70, -80, -90, -100, -110, -120, -130, -140, -150, -160,
    -170, -180, -190, -200, -210, -220, -230, -240, -250, -260, -270, -280, -285, -290, -295, -300, -305, -310, -315, -320,
    -325, -330, -335, -340, -345, -350, -355, -360, -365, -370, -375, -380, 330, 320, 310, 300, 280, 270, 260, 250, 220, 210, 
    200, 190, 180, 170, 160, 150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0, -10, -20, -30, -40, -50, -60, 
    -70, -80, -90, -100, -110, -120, -130, -140, -150, -160, -170, -180, -190, -200, -210, -220, -230, -240, -250, -260, -270,
    -280, -285, -290, -295, -300, -305, -310, -315, -320, -325, -330, -335, -340, -345, -350, -355, -360, -365, -370, -375, -380}; 
    
    int arr[] = {330, 320, 310, 300, 280, 270, 260, 250, 220, 210, 200, 190, 180, 170, 160, 150, 140, 130, 120, 110, 100, 
    90, 80, 70, 60, 50, 40, 30, 20, 10, 0, -10, -20, -30, -40, -50, -60, -70, -80, -90, -100, -110, -120, -130, -140, -150, 
    -160, -170, -180, -190, -200, -210, -220, -230, -240, -250, -260, -270, -280, -285, -290, -295, -300, -305, -310, -315, 
    -320, -325, -330, -335, -340, -345, -350, -355, -360, -365, -370, -375, -380, 330, 320, 310, 300, 280, 270, 260, 250, 220,
    210, 200, 190, 180, 170, 160, 150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0, -10, -20, -30, -40, -50,
    -60, -70, -80, -90, -100, -110, -120, -130, -140, -150, -160, -170, -180, -190, -200, -210, -220, -230, -240, -250, -260,
    -270, -280, -285, -290, -295, -300, -305, -310, -315, -320, -325, -330, -335, -340, -345, -350, -355, -360, -365, -370, 
    -375, -380, 330, 320, 310, 300, 280, 270, 260, 250, 220, 210, 200, 190, 180, 170, 160, 150, 140, 130, 120, 110, 100, 90, 
    80, 70, 60, 50, 40, 30, 20, 10, 0, -10, -20, -30, -40, -50, -60, -70, -80, -90, -100, -110, -120, -130, -140, -150, -160,
    -170, -180, -190, -200, -210, -220, -230, -240, -250, -260, -270, -280, -285, -290, -295, -300, -305, -310, -315, -320,
    -325, -330, -335, -340, -345, -350, -355, -360, -365, -370, -375, -380, 330, 320, 310, 300, 280, 270, 260, 250, 220, 210, 
    200, 190, 180, 170, 160, 150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0, -10, -20, -30, -40, -50, -60, 
    -70, -80, -90, -100, -110, -120, -130, -140, -150, -160, -170, -180, -190, -200, -210, -220, -230, -240, -250, -260, -270,
    -280, -285, -290, -295, -300, -305, -310, -315, -320, -325, -330, -335, -340, -345, -350, -355, -360, -365, -370, -375, -380}; 
    
    int n = sizeof(arr) / sizeof(arr[0]); 
  
    // Pass the array, the pointer to the first element and 
    // the pointer to the last element 
    clock_t tStart = clock();
    // Standard Insertion Sorting Algorithm
    InsertionSort(arr, arr, arr+n-1); 
    clock_t tStart1 = clock();
    // My Insertion Sorting Algorithm
    InsertionSort1(arr1, arr1, arr1+n-1); 
    clock_t tStart2 = clock();
    sort(arr2, arr2+n); 
    printf("Time taken 1: %.2fs\n", (double)(tStart1 - tStart));
    printf("Time taken 2: %.2fs\n", (double)(tStart2 - tStart1));
    printf("Time taken 3: %.2fs\n", (double)(clock() - tStart2));
    printArray(arr, n);
    printArray(arr1, n);
    printArray(arr2, n);
  
    return(0); 
} 
